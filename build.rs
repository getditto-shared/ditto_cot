use std::fs::{self, File};
use std::io::Write;
use typify::{TypeSpace, TypeSpaceSettings};
use schemars::schema::RootSchema;

fn main() {
    // Directory containing the JSON schema files
    let schema_path = "src/schema/ditto_schemas/ditto.schema.json";
    let out_file = "src/ditto/schema.rs";

    // Instruct Cargo to rerun if the schema or build script changes
    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed={}", schema_path);

    // Read the unified schema file
    let schema_str = fs::read_to_string(schema_path).expect("Failed to read schema file");
    let schema: RootSchema = serde_json::from_str(&schema_str).expect("Invalid JSON schema");

    // Generate Rust code from the schema
    let mut settings = TypeSpaceSettings::default();
    settings.with_derive("schemars::JsonSchema".to_string());
    let mut type_space = TypeSpace::new(&settings);
    type_space.add_root_schema(schema).expect("Failed to add schema");
    let generated = type_space.to_stream().to_string();

    // Write the generated code to the output file
    let mut file = File::create(out_file).expect("Failed to create output file");
    writeln!(file, "// This file is @generated by build.rs; do not edit by hand.\n").unwrap();
    writeln!(file, "#![allow(missing_docs)]\n").unwrap();
    writeln!(file, "use serde::{{Serialize, Deserialize}};\n").unwrap();
    file.write_all(generated.as_bytes()).expect("Failed to write generated code");
}
