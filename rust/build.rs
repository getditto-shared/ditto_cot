use schemars::schema::{RootSchema, Schema};
use std::fs::{self, File};
use std::io::Write;
use typify::{TypeSpace, TypeSpaceSettings};

// Helper function to add serde attributes to the _id field
fn add_serde_attributes(schema: &mut RootSchema) {
    if let Some(Schema::Object(schema_obj)) = schema.definitions.get_mut("Common") {
        if let Some(props) = &mut schema_obj.object {
            if let Some(Schema::Object(schema_obj)) = props.properties.get_mut("_id") {
                // Add serde rename attribute
                schema_obj.extensions.insert(
                    "x-rust-type-attributes".to_string(),
                    serde_json::json!(["#[serde(rename = \"_id\")]", "#[schemars(rename = \"_id\")]"]),
                );
            }
        }
    }
}

fn main() {
    // Directory containing the JSON schema files
    let schema_path = "../schema/ditto.schema.json";
    let out_file = "src/ditto/schema.rs";

    // Instruct Cargo to rerun if the schema or build script changes
    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed={}", schema_path);

    // Read the unified schema file
    let schema_str = fs::read_to_string(schema_path).expect("Failed to read schema file");
    let mut schema: RootSchema = serde_json::from_str(&schema_str).expect("Invalid JSON schema");
    
    // Add serde attributes to the _id field
    add_serde_attributes(&mut schema);

    // Generate Rust code from the schema
    let mut settings = TypeSpaceSettings::default();
    settings.with_derive("schemars::JsonSchema".to_string());
    let mut type_space = TypeSpace::new(&settings);
    type_space
        .add_root_schema(schema)
        .expect("Failed to add schema");
    let generated = type_space.to_stream().to_string();

    // Write the generated code to the output file
    let mut file = File::create(out_file).expect("Failed to create output file");
    writeln!(
        file,
        "// This file is @generated by build.rs; do not edit by hand.\n"
    )
    .unwrap();
    writeln!(file, "#![allow(missing_docs)]\n").unwrap();
    writeln!(file, "use serde::{{Serialize, Deserialize}};\n").unwrap();
    file.write_all(generated.as_bytes())
        .expect("Failed to write generated code");
}
